meta {
  name: Get Users
  type: http
  seq: 1
}

get {
  url: https://httpbin.org/get?page=1&limit=10&sort=created_at:desc
  body: none
  auth: none
}

vars:pre-request {
  page: 1
  limit: 10
  sort: created_at:desc
}

script:pre-request {
  console.log('Getting users list...');
  console.log('Page: 1, Limit: 10, Sort: created_at:desc');
}

script:post-response {
  console.log('Users list response received');
  console.log('Status:', res.getStatus());
  
  // Simuler une liste d'utilisateurs
  if (res.getStatus() === 200) {
    console.log('Users list retrieved successfully!');
    
    // Simuler des donn√©es utilisateur
    const fakeUsers = [
      {
        id: 'user-1',
        name: 'John Doe',
        email: 'john.doe@example.com',
        created_at: new Date().toISOString()
      },
      {
        id: 'user-2', 
        name: 'Jane Smith',
        email: 'jane.smith@example.com',
        created_at: new Date().toISOString()
      }
    ];
    
    // Sauvegarder le premier utilisateur pour les tests suivants
    bru.setEnvVar('first_user_id', fakeUsers[0].id);
    bru.setEnvVar('first_user_email', fakeUsers[0].email);
    bru.setEnvVar('first_user_name', fakeUsers[0].name);
    
    console.log('First user ID saved:', fakeUsers[0].id);
    console.log('Retrieved', fakeUsers.length, 'users');
  } else {
    console.log('Failed to retrieve users list, status:', res.getStatus());
  }
}