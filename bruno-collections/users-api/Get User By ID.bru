meta {
  name: Get User By ID
  type: http
  seq: 2
}

get {
  url: {{api_base_url}}/{{api_version}}/users/{{user_id}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{auth_token}}
}

vars:pre-request {
  user_id: {{first_user_id}}
}

script:pre-request {
  // Utiliser les fonctions globales
  require('../../scripts/global-setup.js');
  
  const userId = bru.getVar('user_id') || bru.getEnvVar('first_user_id');
  
  if (!userId) {
    throw new Error('No user ID available. Please run "Get Users" first.');
  }
  
  bru.setVar('user_id', userId);
  
  utils.log('Getting user details', { userId: userId });
  utils.incrementRequestCount();
}

script:post-response {
  const response = utils.parseJSONResponse(bru.getResponseBody());
  const status = bru.getResponseStatus();
  
  utils.log('User details response', {
    status: status,
    userId: response?.id
  });
  
  // Validation
  expect(status).to.equal(200);
  expect(response).to.have.property('id');
  expect(response).to.have.property('email');
  
  // Test avec nos utilitaires
  if (response.email) {
    expect(utils.validateEmail(response.email)).to.be.true;
  }
  
  if (response.phone) {
    expect(utils.validatePhone(response.phone)).to.be.true;
  }
  
  // Sauvegarder les d√©tails pour d'autres tests
  bru.setEnvVar('current_user_email', response.email);
  bru.setEnvVar('current_user_name', response.name);
}