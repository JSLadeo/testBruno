meta {
  name: Register
  type: http
  seq: 2
}

post {
  url: https://httpbin.org/post
  body: json
  auth: none
}

body:json {
  {
    "name": "{{user_name}}",
    "email": "{{user_email}}",
    "password": "{{user_password}}",
    "phone": "{{user_phone}}"
  }
}

script:pre-request {
  // Charger les utilitaires globaux
  require('./global-utils.js');
  
  // Générer des données de test aléatoires
  const userName = utils.faker.name();
  const userEmail = utils.faker.email(userName);
  const userPhone = utils.faker.phone();
  const userPassword = 'TestPass123!';
  
  // Valider les données générées
  if (!utils.validateEmail(userEmail)) {
    throw new Error('Generated email is invalid');
  }
  
  if (!utils.validatePhone(userPhone)) {
    throw new Error('Generated phone is invalid');
  }
  
  // Définir les variables
  bru.setVar('user_name', userName);
  bru.setVar('user_email', userEmail);
  bru.setVar('user_password', userPassword);
  bru.setVar('user_phone', userPhone);
  
  utils.log('Registration data generated', {
    name: userName,
    email: userEmail,
    phone: userPhone
  });
  
  utils.incrementRequestCount();
}

script:post-response {
  console.log('Registration response received');
  console.log('Status:', res.getStatus());
  
  // Simuler une réponse d'inscription réussie
  if (res.getStatus() === 200) {
    console.log('Registration successful!');
    
    // Simuler les informations utilisateur créées
    const fakeUser = {
      id: 'user-' + Math.floor(Math.random() * 1000),
      name: bru.getVar('user_name'),
      email: bru.getVar('user_email'),
      phone: bru.getVar('user_phone')
    };
    
    // Sauvegarder l'ID utilisateur créé
    bru.setEnvVar('registered_user_id', fakeUser.id);
    console.log('User registered successfully', fakeUser);
  } else {
    console.log('Registration failed with status:', res.getStatus());
  }
}