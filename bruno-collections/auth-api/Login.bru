meta {
  name: Login
  type: http
  seq: 1
}

post {
  url: https://httpbin.org/post
  body: json
  auth: none
}

body:json {
  {
    "email": "{{test_email}}",
    "password": "{{test_password}}"
  }
}

vars:pre-request {
  test_email: john.doe@example.com
  test_password: password123
  request_id: 12345-test-request
}

script:pre-request {
  // Définir les variables de test
  bru.setVar('test_email', 'john.doe@example.com');
  bru.setVar('test_password', 'password123');
  bru.setVar('request_id', 'login-' + Date.now());
  
  console.log('Login request starting...');
  console.log('Email:', bru.getVar('test_email'));
  console.log('Request ID:', bru.getVar('request_id'));
}

script:post-response {
  console.log('Login response received');
  console.log('Status:', res.getStatus());
  
  // Parser la réponse JSON d'httpbin.org
  let response;
  try {
    response = JSON.parse(res.getBody());
  } catch (e) {
    console.log('Response is not JSON');
    response = null;
  }
  
  // Simuler une réponse de login réussie
  if (res.getStatus() === 200) {
    console.log('Login successful!');
    
    // Simuler un token d'authentification
    const fakeToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.fake-token-' + Date.now();
    bru.setEnvVar('auth_token', fakeToken);
    console.log('Auth token saved (simulated)');
    
    // Simuler les informations utilisateur
    const fakeUser = {
      id: 'user-' + Math.floor(Math.random() * 1000),
      email: bru.getVar('test_email'),
      name: 'John Doe'
    };
    bru.setEnvVar('current_user_id', fakeUser.id);
    console.log('User ID saved:', fakeUser.id);
    
    // Sauvegarder les données complètes pour les autres tests
    bru.setEnvVar('current_user_email', fakeUser.email);
    bru.setEnvVar('current_user_name', fakeUser.name);
    
  } else {
    console.log('Login failed with status:', res.getStatus());
  }
}