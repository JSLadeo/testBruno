meta {
  name: Create Product
  type: http
  seq: 1
}

post {
  url: https://httpbin.org/post
  body: json
  auth: none
}

body:json {
  {
    "name": "{{product_name}}",
    "description": "{{product_description}}",
    "price": {{product_price}},
    "category": "{{product_category}}",
    "sku": "{{product_sku}}",
    "stock": {{product_stock}}
  }
}

script:pre-request {
  // Charger les utilitaires globaux
  require('./global-utils.js');
  
  // Générer des données de produit
  const productName = `Test Product ${utils.generateUUID().substring(0, 8)}`;
  const productPrice = parseFloat(utils.faker.price(10, 500));
  const productSku = `SKU-${utils.generateMD5(productName).substring(0, 8).toUpperCase()}`;
  const categories = ['Electronics', 'Clothing', 'Books', 'Home', 'Sports'];
  const productCategory = categories[Math.floor(Math.random() * categories.length)];
  const productStock = Math.floor(Math.random() * 100) + 1;
  
  const description = `${productCategory} product created at ${utils.formatDate(new Date())}`;
  
  // Définir toutes les variables
  bru.setVar('product_name', productName);
  bru.setVar('product_description', description);
  bru.setVar('product_price', productPrice);
  bru.setVar('product_category', productCategory);
  bru.setVar('product_sku', productSku);
  bru.setVar('product_stock', productStock);
  
  console.log('Creating product', {
    name: productName,
    price: productPrice,
    category: productCategory,
    sku: productSku
  });
}

script:post-response {
  console.log('Product creation response received');
  console.log('Status:', res.getStatus());
  
  // Simuler une réponse de création de produit réussie
  if (res.getStatus() === 200) {
    console.log('Product created successfully!');
    
    const createdProduct = {
      id: 'prod-' + Math.floor(Math.random() * 1000),
      name: bru.getVar('product_name'),
      description: bru.getVar('product_description'),
      price: parseFloat(bru.getVar('product_price')),
      category: bru.getVar('product_category'),
      sku: bru.getVar('product_sku'),
      stock: parseInt(bru.getVar('product_stock')),
      created_at: new Date().toISOString()
    };
    
    // Sauvegarder l'ID du produit créé pour les autres tests
    bru.setEnvVar('created_product_id', createdProduct.id);
    bru.setEnvVar('created_product_sku', createdProduct.sku);
    
    console.log('Created product:', {
      id: createdProduct.id,
      sku: createdProduct.sku,
      name: createdProduct.name
    });
  } else {
    console.log('Product creation failed with status:', res.getStatus());
  }
}