meta {
  name: Advanced Analytics
  type: http
  seq: 3
}

get {
  url: https://httpbin.org/get?period=30d&metrics=sales,views,revenue
  body: none
  auth: none
}

vars:pre-request {
  period: 30d
  metrics: sales,views,revenue
}

script:pre-request {
  // Charger les utilitaires globaux
  require('./global-utils.js');
  
  // Mesurer le temps de début
  const startTime = Date.now();
  bru.setVar('request_start_time', startTime);
  
  console.log('Advanced analytics request starting...');
  console.log('Period: 30d, Metrics: sales,views,revenue');
}

script:post-response {
  // Mesurer le temps de réponse
  const startTime = parseInt(bru.getVar('request_start_time'));
  const responseTime = Date.now() - startTime;
  
  console.log('Advanced analytics response received');
  console.log('Status:', res.getStatus());
  console.log('Response time:', responseTime + 'ms');
  
  // Simuler des métriques d'analytics
  if (res.getStatus() === 200) {
    console.log('Analytics completed successfully!');
    
    const analyticsData = {
      totalSales: 1250,
      totalViews: 15420,
      revenue: 89500.50,
      period: '30d',
      generatedAt: new Date().toISOString()
    };
    
    console.log('Analytics metrics:', analyticsData);
    
    // Sauvegarder les métriques importantes
    bru.setEnvVar('last_analytics_metrics', JSON.stringify(analyticsData));
    
    console.log('Analytics data saved for future use');
  } else {
    console.log('Analytics failed with status:', res.getStatus());
  }
}