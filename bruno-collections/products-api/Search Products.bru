meta {
  name: Search Products
  type: http
  seq: 2
}

get {
  url: https://httpbin.org/get?q=Test&category=Electronics&min_price=10&max_price=1000
  body: none
  auth: none
}

vars:pre-request {
  search_query: Test
  category_filter: Electronics
  min_price: 10
  max_price: 1000
}

script:pre-request {
  // Charger les utilitaires globaux
  require('./global-utils.js');
  
  const requestId = utils.generateUUID();
  
  // Construire les paramètres de recherche
  const searchParams = {
    q: 'Test',
    category: 'Electronics',
    min_price: '10',
    max_price: '1000'
  };
  
  console.log('Searching products', {
    requestId: requestId,
    params: searchParams
  });
  
  // Sauvegarder l'ID de requête pour le tracking
  bru.setVar('request_id', requestId);
}

script:post-response {
  console.log('Product search response received');
  console.log('Status:', res.getStatus());
  
  // Simuler des résultats de recherche
  if (res.getStatus() === 200) {
    console.log('Product search completed successfully!');
    
    const fakeProducts = [
      {
        id: 'prod-1',
        name: 'Test Laptop',
        price: 899.99,
        category: 'Electronics',
        inStock: true
      },
      {
        id: 'prod-2',
        name: 'Test Smartphone',
        price: 599.99,
        category: 'Electronics',
        inStock: true
      }
    ];
    
    console.log('Found', fakeProducts.length, 'products');
    
    fakeProducts.forEach((product, index) => {
      console.log(`Product ${index + 1}:`, {
        id: product.id,
        name: product.name,
        price: product.price
      });
    });
    
    // Sauvegarder le premier produit trouvé
    bru.setEnvVar('found_product_id', fakeProducts[0].id);
  } else {
    console.log('Product search failed with status:', res.getStatus());
  }
}